package pkt2MetodosNum;

import java.math.BigDecimal;
import java.math.MathContext;
import java.util.Scanner;

public class clsSistemaDeEcua {

	public static void main(String[] args) {
		Scanner scanner = new Scanner(System.in);

        // Ingresar los coeficientes del sistema de ecuaciones
        System.out.println("Ingrese los coeficientes del sistema de ecuaciones 3x3:");
        BigDecimal[][] matriz = new BigDecimal[3][4];

        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 4; j++) {
                System.out.print("Ingrese el valor de a" + (i + 1) + (j + 1) + ": ");
                matriz[i][j] = new BigDecimal(scanner.next());
            }
        }

        // Resolver el sistema de ecuaciones utilizando eliminación Gaussiana
        BigDecimal[] solucionGaussiana = resolverGaussiana(matriz);

        // Mostrar resultados
        System.out.println("\nSolución obtenida mediante eliminación Gaussiana:");
        mostrarSolucion(solucionGaussiana);

        // Calcular el error absoluto y el error relativo
        BigDecimal[] solucionMatricial = resolverMatricial(matriz);
        BigDecimal errorAbsoluto = calcularErrorAbsoluto(solucionMatricial, solucionGaussiana);
        BigDecimal errorRelativo = calcularErrorRelativo(solucionMatricial, solucionGaussiana);

        System.out.println("\nError Absoluto: " + errorAbsoluto);
        System.out.println("Error Relativo: " + errorRelativo);

        scanner.close();
    }

    // Método para resolver el sistema de ecuaciones utilizando eliminación Gaussiana con BigDecimal
	public static BigDecimal[] resolverGaussiana(BigDecimal[][] matriz) {
        int n = 3; // Tamaño de la matriz
        BigDecimal[] solucion = new BigDecimal[n];

        for (int k = 0; k < n - 1; k++) {
            for (int i = k + 1; i < n; i++) {
                BigDecimal factor = matriz[i][k].divide(matriz[k][k], MathContext.DECIMAL128);
                for (int j = k; j < n + 1; j++) {
                    matriz[i][j] = matriz[i][j].subtract(factor.multiply(matriz[k][j]));
                }
            }
        }

        solucion[n - 1] = matriz[n - 1][n + 1 - 1].divide(matriz[n - 1][n - 1], MathContext.DECIMAL128);
        for (int i = n - 2; i >= 0; i--) {
            BigDecimal sum = BigDecimal.ZERO;
            for (int j = i + 1; j < n; j++) {
                sum = sum.add(matriz[i][j].multiply(solucion[j]));
            }
            solucion[i] = matriz[i][n + 1 - 1].subtract(sum).divide(matriz[i][i], MathContext.DECIMAL128);
        }

        return solucion;
    }


    // Método para resolver el sistema de ecuaciones utilizando el método matricial con BigDecimal
	public static BigDecimal[] resolverMatricial(BigDecimal[][] matriz) {
        BigDecimal[] solucion = new BigDecimal[3];

        for (int i = 0; i < 3; i++) {
            solucion[i] = matriz[i][3].divide(matriz[i][i], MathContext.DECIMAL128);
        }

        return solucion;
    }

    // Método para calcular el error absoluto
    public static BigDecimal calcularErrorAbsoluto(BigDecimal[] solucionMatricial, BigDecimal[] solucionGaussiana) {
        BigDecimal error = BigDecimal.ZERO;
        for (int i = 0; i < solucionMatricial.length; i++) {
            error = error.add(solucionMatricial[i].subtract(solucionGaussiana[i]).abs());
        }
        return error;
    }

    // Método para calcular el error relativo
    public static BigDecimal calcularErrorRelativo(BigDecimal[] solucionMatricial, BigDecimal[] solucionGaussiana) {
        BigDecimal maximo = BigDecimal.ZERO;
        for (int i = 0; i < solucionMatricial.length; i++) {
            maximo = maximo.max(solucionMatricial[i].abs());
        }
        return calcularErrorAbsoluto(solucionMatricial, solucionGaussiana).divide(maximo, MathContext.DECIMAL128);
    }

    // Método para mostrar la solución
    public static void mostrarSolucion(BigDecimal[] solucion) {
        for (int i = 0; i < solucion.length; i++) {
            System.out.println("x" + (i + 1) + " = " + solucion[i]);
        }
    }
}
